#page 1
Create database Colleage;

#page 2
CREATE TABLE student(
	student_id int PRIMARY KEY,
	name VARCHAR(10) NOT NULL ,
	year TINYINT NOT NULL DEFAULT 1,
	dept_no INT NOT NULL,
	major VARCHAR(20) );

#page 3
CREATE TABLE department (
	dept_no INT PRIMARY KEY AUTO_INCREMENT,
	dept_name VARCHAR(20) UNIQUE ,
	office VARCHAR(20),
	office_tel VARCHAR(13) NOT NULL );

#page 4
ALTER TABLE student MODIFY major VARCHAR(30);
ALTER TABLE 'student' ADD "gender" char(1) enum('m','f');

#page 5
insert into student values (20070002, 'Jane Smith', 3, 4, 'Business Administration') ;
insert into student values (20060001, 'Ashley Jackson', 4, 4, 'Business Administration');
insert into student values (20030001, 'Liam Johnson', 4, 2, 'Electrical Engineering') 
insert into student values  (20040003, 'Jacob Lee', 3, 2, 'Electrical Engineering')
insert into student values (20060002, 'Noah Kim', 3, 1, 'Computer Science') 
insert into student values (20100002, 'Ava Lim', 3, 4, 'Business Administration')
insert into student values (20110001, 'Emma Watson', 2, 1, 'Computer Science') 
insert into student values (20080003, 'Lisa Maria', 4, 3, 'Law')
insert into student values (20040002, 'Jacob William', 4, 5, 'Law') 
insert into student values (20070001, 'Emily Rose', 4, 4, 'Business Administration')
insert into student values (20100001, 'Ethan Hunt', 3, 4, 'Business Administration') 
insert into student values (20110002, 'Jason Mraz' 2, 1, 'Electrical Engineering')
insert into student values (20030002, 'John Smith', 5, 1, 'Computer Science') 
insert into student values (20070003, 'Sophia Park', 4, 3, 'Law')
insert into student values (20070007, 'James Michael', 2, 4, 'Business Administration') 
insert into student values (20100003, 'James Bond', 3, 1, 'Computer Science')
insert into student values (20070005, 'Olivia Madison', 2, 5, 'English Language and Literature')

#page 6
insert into department values (1, 'Computer Science', "Science Building 101', '02-3290-0123');
insert into department values (2, 'Electrical Engineering', 'Engineering Building 401', '02-3290-2345')
insert into department values (3, 'Law', 'Law Building 201', '02-3290-7896')
insert into department values (4, 'Business Administration', 'Business Building 104', '02-3290-1112')
insert into department values (5, 'English Language and Literature', 'Language Building 303', '02-3290-4412')

#page 7
update department set dept_name = "Electrical and Electronics Engineering" where dept_name = "Electric Engineering";
insert into department values (6, 'Special Education' , 'Education Building 403', '02-3290-2347');
UPDATE student SET major = "Special Education" where name = "Emma Watson";
DELETE from student where name = "Jason Mraz";
DELETE from student where name = "John Smith";

#page 8
select * from student where major = "computer Science";
select student_id, year, major from student;
select * from student where year = 3;
select * from student where year = 3 OR year = 4;
select * from student where dept_no = (select dept_no from department where dept_name = "Business Administration");

#page 9
select * from student where student_id LIKE "2007%";
select * from student ORDER BY student_id ASC;
select major from student GROUP BY major HAVING AVG(year) > 3;
select * from student where major = "Business Administration" AND student_id LIKE "2007%" LIMIT 2;

#page 11
1. select role from roles where movie_id = (select id from movies where name LIKE "PI");
2. select first_name, last_name, role from actors as A JOIN roles as R ON a.id = r.actor_id where movie_id = 
(select id from movies where name LIKE "PI");
3. select * FROM actors as A JOIN roles R on R.actor_id = A.id Join movies as M ON M.id = R.movie_id Join roles as R2 ON 
R2.actor_id = A.id JOIN movies as M2 ON M2.id = R2.movie_id Where M.name = "Kill Bill: vol. 1" and M2.name = "Kill Bill: vol. 2";
4.select first_name, last_name, COUNT(*) from actors as A JOIN roles as R ON R.actor_id = A.id JOIN movies as M ON M.id = R.movie_id 
GROUP BY first_name, last_name ORDER BY COUNT(*) DESC LIMIT 7;
5. select genre, COUNT(*) from movies as M JOIN movies_genres as MG ON M.id = MG.movie_id GROUP BY genre ORDER BY COUNT(*) DESC LIMIT 3;
6. select * from directors as D JOIN directors_genre as DG ON DG.director_id = D.id;
select first_name, last_name, COUNT(*) from directors as D JOIN directors_genres as DG ON 
DG.director_id = D.id where genre = "Thriller" GROUP BY first_name, last_name ORDER BY COUNT(*);

#page 12
1. select grade from grades as G JOIN courses AS C ON c.id = G.course_id where name = "Computer Science 143";
2. select grade from grades as G JOIN courses AS C ON c.id = G.course_id where name = "Computer Science 143" AND grade <= 'B-';
3. select S.name, C.name, grade from students as S JOIN grades as G ON g.student_id = S.id JOIN courses as C ON C.id = g.course_id where grade <= "B-";
4. select C.name, count(*) from courses as C JOIN grades as G ON G.course_id = C.id JOIN students as S
 ON S.id = G.student_id GROUP BY C.name HAVING COUNT(*) >= 2 ORDER BY COUNT(*) DESC;